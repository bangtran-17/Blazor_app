@inject NavigationManager NavigationManager

﻿@using Microsoft.AspNetCore.Components.Authorization;

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        @if (IsAdminRoute(routeData))
        {
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(HomePageLayout)" />
        }
        else
        {
            <AuthorizeRouteView RouteData="@routeData"  />
        }
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
            <CascadingAuthenticationState>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </CascadingAuthenticationState>
    </NotFound>
</Router>


@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    private async Task LogUserAuthenticationState()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity!.IsAuthenticated)
        {
            Console.WriteLine($"User {user.Identity.Name} is authenticated.");
        }
        else
        {
            Console.WriteLine("User is NOT authenticated.");
        }
    }

    bool IsAdminRoute(RouteData routeData)
    {
        var uri = new Uri(NavigationManager.Uri);
        return uri.AbsolutePath.StartsWith("/admin", StringComparison.OrdinalIgnoreCase);
    }
    @* DefaultLayout="@typeof(MainLayout)" *@
}