@page "/admin/guests"

@attribute [Authorize(Roles = "admin, employee")]

@inject IGuestService GuestService
@inject NavigationManager NavigationManager

<PageTitle>Quản lý khách hàng</PageTitle>

<div class="row container">
    <input @oninput="SearchGuests" class="tim col-6 mt-4 ml-4" placeholder="Tìm kiếm">
    <div class="col-6 row mt-4">
        <div class="sua col-4 d-inline-block w-2"></div>
        <button class="w-20" @onclick="NavigateBack">Quay lại</button>
        <div class="them col-4 d-inline-block w-2"></div>
        <button class="w-20" @onclick="AddGuest">Thêm</button>
        <div class="xoa col-4 d-inline-block w-2"></div>
        <button class="w-20">Xóa</button>
    </div>
</div>
<!-------------------------------------------------------------------->
@* <div class="row container">
    <div class="sort mt-4 ml-4">
        <div class="ngay col-3 d-inline-block w-2"></div>
        <span class="w-21">Hôm nay</span>

        <div class="thang col-3 d-inline-block w-2"></div>
        <span class="w-21">Trong tuần</span>

        <div class="nam col-3 d-inline-block w-2"></div>
        <span class="w-21">Trong tháng</span>

        <div class="select-input col-3 d-inline-block w-2"></div>
        <span class="w-21">Loại khách<i class="fa-solid fa-angle-down"></i></span>
        <span><input class="chn-ngy" type="date" /></span>
    </div>
</div> *@
<!---------------------------------------------------------------------------------->
<div class="row container d-flex flex-column flex-shrink-0 col-9">
    @* <input type="text" id="myInput" onkeyup="myFunction()" placeholder="Search for names.."> *@

    <table id="myTable">
        <tr class="header">
            <th style="width:20%;">MÃ</th>
            <th style="width:20%;">TÊN KHÁCH HÀNG</th>
            <th style="width:20%;">SĐT</th>
            <th style="width:20%;">Email</th>
            <th style="width:20%;"></th>
        </tr>
        @{
            var guestsToDisplay = GuestsSearched.Any() ? GuestsSearched : GuestService.Guests;
            var pageSize = 10;
            // var currentPage = 1;

            if (currentPage > 1)
            {
                guestsToDisplay = guestsToDisplay
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToList();
            }
            else
            {
                guestsToDisplay = guestsToDisplay
                .Take(pageSize)
                .ToList();
            }

        }
        @foreach (var guest in guestsToDisplay)
        {
            <tr>
                <td>@guest.GId</td>
                <td>@guest.GFirstName</td>
                <td>@guest.GSdt</td>
                <td>@guest.GCccd</td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => ShowGuest(guest.GId))">Detail</button>
                </td>
            </tr>
        }
    </table>
</div>
<!----------------------------------------------------------------------------------->
<div>
    <button @onclick="(() => ChangePage(-1))" disabled="@(currentPage == 1)">Previous</button>
    <span>Page @currentPage</span>
    @* <button @onclick="(() => ChangePage(1))" disabled="@(currentPage * pageSize >= employeesToDisplay.Count)">Next</button> *@
    <button @onclick="(() => ChangePage(1))" disabled="@(currentPage * pageSize >= Math.Max(GuestService.Guests.Count,GuestsSearched.Count))">Next</button>
</div>
@* <div class="row ">
    <div class="pagination">
        <a href="#">&laquo;</a>
        <a class="active" href="#">1</a>
        <a href="#">2</a>
        <a href="#">3</a>
        <a href="#">4</a>
        <a href="#">5</a>
        <a href="#">6</a>
        <a href="#">&raquo;</a>
    </div>
</div> *@


@code {
    List<Guest> GuestsSearched = new List<Guest>();

    private int currentPage = 1;

    // don't need to wait until everythings is rendered
    protected override async Task OnInitializedAsync()
    {
        await GuestService.GetGuests();
    }
    void ShowGuest(int id)
    {
        NavigationManager.NavigateTo($"admin/guest/{id}");
    }

    void AddGuest()
    {

        NavigationManager.NavigateTo("admin/guest");
    }

    void NavigateBack()
    {
        NavigationManager.NavigateTo("admin");
    }

    async Task SearchGuests(ChangeEventArgs e)
    {
        // displayValue = $"You entered: {e.Value}";

        if (string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            GuestsSearched.Clear(); // Clear the search results if the input is empty
        }
        else
        {
            GuestsSearched = await GuestService.SearchGuests(e.Value.ToString());
        }

        StateHasChanged(); // Ensure the UI is updated
    }

    void ChangePage(int change)
    {
        currentPage += change;
        StateHasChanged();
    }
}



