@page "/admin/employee"
@page "/admin/employee/{id:int}"
@* @page "/admin/employee/{fname}" *@

@attribute [Authorize(Roles = "admin")]

@using Hotel.Shared

@inject IEmployeeService EmployeeService
@inject IDepartmentService DepartmentService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Quản Lý Nhân Viên</PageTitle>

<button class="btn btn-primary" @onclick="NavigateBack">Quay lại</button>

@if (Id is null)
{
    <PageTitle>Create a new Employee</PageTitle>
    <h3>Create a new Employee</h3>
    <br />
}
else
{
    <PageTitle>Edit Employee @employee.EEmail</PageTitle>
    <h3>Edit Employee @employee.EEmail</h3>
    <br />
    
}

<EditForm Model="employee" OnSubmit="HandleSubmit">
    <div>
        <label for="firstName">Họ tên</label>
        <InputText id="firstName" @bind-Value="employee.EFirstName" class="form-control" />
    </div>
    <div>
        <label for="contactNumber">Số điện thoại</label>
        <InputText id="contactNumber" @bind-Value="employee.EContactNumber" class="form-control" />
    </div>
    <div>
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="employee.EEmail" class="form-control" />
    </div>
    <div>
        <label for="designation">Vị trí</label>
        <InputText id="designation" @bind-Value="employee.EDesignation" class="form-control" />
    </div>
    <div>
        <label for="department">Phòng ban</label>
        <InputText id="department" @bind-Value="departmentName" class="form-control" />
    </div>
    <div>
        <label for="joinDate">Ngày vào làm</label>
        <InputDate id="joinDate" @bind-Value="employee.EJoinDate" class="form-control" />
    </div>
    <div>
        <label for="address">Địa chỉ</label>
        <InputText id="address" @bind-Value="employee.EAddress" class="form-control" />
    </div>
    <div class="form-group mt-2">
        <label for="name" class="-dark font-bold">Tên tài khoản:</label><br>
        <InputText type="text" name="name" id="name" class="form-control input" @bind-Value="RegisterModel.UserName" />
        <ValidationMessage For="@(() => RegisterModel.UserName)" @bind-Value="RegisterModel.UserName" />
    </div>
    <div class="form-group mt-2">
        <label for="password" class="text-dark font-bold">Password:</label><br>
        <InputText type="password" name="password" id="password" class="form-control focus:shadow-outline input" @bind-Value="RegisterModel.Password" />
        <ValidationMessage For="@(() => RegisterModel.Password)" />
    </div>
    <div class="form-group mt-2">
        <label for="confirm-password" class="text-dark font-bold">Confirm Password:</label><br>
        <InputText type="password" name="password_confirmation" id="confirm-password" class="form-control input" @bind-Value="RegisterModel.ConfirmPassword" />
        <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary">@btnText</button>

    <button class="btn btn-danger" @onclick="DeleteEmployee">Delete</button>
</EditForm>


@code {
    [Parameter]
    public int? Id { get; set; }
    [ParameterAttribute]
    public string? Fname { get; set; }
    private string departmentName;

    private RegisterModel RegisterModel = new RegisterModel();


    string btnText = string.Empty;

    Employee? employee = new Employee
    {
        EJoinDate = DateTime.Today
    };

    protected override void OnInitialized()
    {
        btnText = Id == null ? "Lưu" : "Cập nhật";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await EmployeeService.GetEmployeeById((int)Id);
            // var result = await EmployeeService.GetEmployeeByFName(Fname);
            if (result is not null)
            {
                employee = result;
                if(employee.DeId != null)
                {
                    var department = await DepartmentService.GetDepartmentById(employee.DeId ?? -1);
                    departmentName = department.DeName;
                }
            }

            else
                NavigationManager.NavigateTo("/admin/employee");
        }
    }

    async Task DeleteEmployee()
    {
        await EmployeeService.DeleteEmployee(employee.EId);
        NavigationManager.NavigateTo("admin/Employees");
    }

    void NavigateBack()
    {
        NavigationManager.NavigateTo("/admin/employees");
    }

    public string search { get; set; }

    private string displayValue;

    private void HandleInputChange(ChangeEventArgs e)
    {
        // Thực hiện các xử lý hoặc biến đổi giá trị tùy theo nhu cầu
        displayValue = $"You entered: {e.Value}";
    }

    // Hàm tìm và thiết lập DeId
    async Task<bool> SetDepartmentId(string departmentName)
    {
        var department = await DepartmentService.SearchDepartments(departmentName);

        // Nếu tìm thấy phòng ban, thiết lập DeId
        if (department != null)
        {
            employee.DeId = department.FirstOrDefault<Department>().DeId;
            //employee.De = department.FirstOrDefault<Department>();

            return true;
        }
        else
        {
            return false;
            // Nếu không tìm thấy, có thể xử lý tùy ý, ví dụ thông báo lỗi
            // MessageBox.Show("Phòng ban không tồn tại");
        }
    }

    async Task<bool> HandleSubmit()
    {
        if (await SetDepartmentId(departmentName) == true)
        {
            if (Id is null)
            {
                RegisterModel.Email = employee.EEmail;
                employee.EAccount = RegisterModel.UserName;
                await AuthService.RegisterEmployee(RegisterModel);
                await EmployeeService.CreateEmployee(employee);

                NavigationManager.NavigateTo("admin/Employees");
            }
            else
            {
                await EmployeeService.UpdateEmployee((int)Id, employee);
                NavigationManager.NavigateTo("admin/Employees");
            }
            return true;
        }
        return false;
    }
}
