@page "/booking/roomdetail"
 @page "/booking/roomdetail/{Id:int}" 
@* 
@using Hotel.Client.Helper; *@
@using Hotel.Shared.Models
@using Hotel.Shared.CommonFiles
@using Hotel.Client.ViewModel
@using Hotel.Client.Utility

@inject IJSRuntime jsRuntime
@inject ILocalStorageService localStorage
@inject IRoomtypeService hotelRoomService
@inject IStripePaymentService stripePaymentService
@inject IBookingService roomOrderDetailsService
@inject IRoomService roomService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider auth
@inject IGuestService GuestService


    <div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">
        <div class="row p-2 my-3 " style="border-radius:20px; ">
            <div class="col-12 col-lg-7 p-4">
                <div class="row px-2 text-primary border-bottom">
                    <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Selected Room</p></div>
                    <div class="col-4 p-0 float-right">
                        <a href="booking" class="btn btn-secondary btn-block" style="margin-left: 75px !important;">Return to Room Selection</a>
                    </div>
                </div>

                 <div class="row">
                    <div class="col-12">
                        <div id="" class="carousel slide mb-4 m-md-3 m-0 pt-3 pt-md-0" data-ride="carousel">
                            <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">


                            </div>
                        </div>
                    </div>

                </div>
                <div class="row p-2">
                    <div class="col-12">
                        <p class="card-title" style="font-size:xx-large;">@roomtype.RtName</p>
                        <p class="card-text" style="font-size:large">
                        @((MarkupString)@roomtype.RtDes)
                        </p>
                    </div>

                </div>
            </div>

            <div class="col-12 col-lg-5 p-4 2 mt-4 mt-md-0">
                <div class="row  text-primary border-bottom">
                    <div class="col-7 "><p style="font-size:x-large;margin:0px;">Room Information</p></div>
                </div>
                <div>
                    <h4 class="font-weight-bold mt-2 ml-2 text-black">
                    @roomtype.RtName
                    </h4>

                <span class="ml-2 pt-1">Villa Size : @roomtype.RArea sqft</span><br />


                <span class="ml-2">Cost for @HotelBooking.homeVM.NoOfNights nights stay: $@HotelBooking.homeVM.Cost</span>
                    
                  
                </div>
                <EditForm Model="HotelBooking" class="container" OnValidSubmit="HandleCheckout">

                    <div class="row px-2 text-success border-bottom"></div>
                    <div class="form-group pt-2">
                        <label class=" ">FirstName</label>
                        <InputText @bind-Value="HotelBooking.guest.GFirstName" type="text" class="form-control" style="border: 1px solid rgb(154, 169, 222);" />
                    <label class=" ">LastName</label>
                    <InputText @bind-Value="HotelBooking.guest.GLastName" type="text" class="form-control" style="border: 1px solid rgb(154, 169, 222);" />
                    </div>
                    <div class="form-group pt-2">
                        <label class=" ">Phone</label>
                    <InputText @bind-Value="HotelBooking.guest.GSdt" type="text" class="form-control" style="border: 1px solid rgb(154, 169, 222);" />
                    </div>
                    <div class="form-group">
                        <label class=" ">Email</label>
                    <InputText @bind-Value="HotelBooking.guest.GEmail" type="text" class="form-control" style="border: 1px solid rgb(154, 169, 222);" />
                    </div>
                    <div class="form-group">
                        <label class=" ">Check in Date</label>
                    <InputDate TValue="DateTime?" @bind-Value="HotelBooking.homeVM.StartDate" disabled class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class=" ">Check out Date</label>
                    <InputDate TValue="DateTime?" @bind-Value="HotelBooking.homeVM.EndDate" disabled="disabled" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class=" ">Length of stay</label> <br />
                        <span>@HotelBooking.orderDetails.BAmount nights</span>
                    </div>
                    <div class="form-group mt-1">
                        <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                    </div>  
                </EditForm>
            </div>
        </div>
    </div>

@code {
    [Parameter]
    public int? Id { get; set; }

    HotelRoomBookingViewModel HotelBooking = new HotelRoomBookingViewModel();
    HomeVM homeVM { get; set; } = new HomeVM();
    string? user;
    RoomImg? roomimg { get; set; } = new RoomImg();
    Roomtype roomtype { get; set; } = new Roomtype();
    Guest? guest { get; set; } = new Guest();
    List<Room> roomSet { get; set; } = new List<Room>();
    Room roomChosen { get; set; } = new Room();
    Hotel1? hotel = null;
    private decimal? NoOfNights { get; set; } = 1;
    Feedback feedback { get; set; } = new Feedback();
    protected override async Task OnInitializedAsync()
    {
        try {
            await Task.Delay(5000);

            if (Id != null)
            {
                //check if the local storage is not empty (in reality it never will be)
                if (await localStorage.GetItemAsync<HomeVM>(SD.Local_InitialBooking) != null)
                {
                    HotelBooking.homeVM = await localStorage.GetItemAsync<HomeVM>(SD.Local_InitialBooking);

                    var state = await auth.GetAuthenticationStateAsync();
                    user = state.User.Identity.Name;
                    await RandomRoom();

                    roomtype = await hotelRoomService.GetRoomtypeById(Id.Value);

                   
                    HotelBooking.orderDetails.BStayDuration=(int) HotelBooking.homeVM.NoOfNights;
                    HotelBooking.orderDetails.BCheckingDate = HotelBooking.homeVM.StartDate;
                    HotelBooking.orderDetails.BCheckoutDate = HotelBooking.homeVM.EndDate;
                    HotelBooking.orderDetails.BAmount = HotelBooking.homeVM.NoOfNights;
                    HotelBooking.orderDetails.BCost = HotelBooking.homeVM.Cost;
                     HotelBooking.orderDetails.Rid = roomChosen.RId;
                    HotelBooking.orderDetails.BDate = DateTime.Now;
                    HotelBooking.orderDetails.StripeSessionId = "1";
                     await roomOrderDetailsService.CreateBooking(HotelBooking.orderDetails);
                }


                else
                {
                    // await jsRuntime.ToastrError("Please select a check in date");
                }
            }  
            await localStorage.SetItemAsync(SD.Local_RoomOrderDetails, HotelBooking.orderDetails);
        }   
        catch(Exception e)
        {

        }

    }



    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            // var result = await roomImgService.GetRoomImgById((int)Id);
            var resultRT = await hotelRoomService.GetRoomtypeById((int)Id);
        
            // var result = await EmployeeService.GetEmployeeByFName(Fname);
            if (resultRT is not null){
                // roomimg = result;
                roomtype = resultRT;
            }
            else
                NavigationManager.NavigateTo("/booking");
        }
    }


    private async Task HandleCheckout()
    {
            // if (!await HandleValidation())
            // {
        //     return;
        // }

        try
        {


            //Accesing the stripePaymentService
            //await success
            var paymentDTO = new StripePaymentDTO()
                {
                    Cost = Convert.ToInt32(HotelBooking.homeVM.Cost/100),
                    ProductName = roomtype.RtName,
                    ReturnURL = "/booking/roomdetail/" + Id
                };  

            // await GuestService.CreateGuest(HotelBooking.guest);
          


            var result = await stripePaymentService.CheckOutCompleted(paymentDTO);

            NavigationManager.NavigateTo(result);

        }
        catch (Exception e)
        {
            // await jsRuntime.ToastrError(e.Message);
        }
    }


    public async Task RandomRoom()
    {
     
        roomSet = await roomService.GetRoomByFName(Id.ToString());
        foreach(var room in roomSet)
        {
            if (room.RAvailable == "yes")
            {
                roomChosen = room;
                roomChosen.Bookings = null;
                break;  
            }
            

        }
    }
    // private async Task<bool> HandleValidation()
    // {
    //     if (string.IsNullOrEmpty(HotelBooking.guest.GFirstName))
    //     {
    //         await jsRuntime.ToastrError("Name cannot be empty");
    //         return false;
    //     }
    //     if (string.IsNullOrEmpty(HotelBooking.guest.GSdt))
    //     {
    //         await jsRuntime.ToastrError("Phone cannot be empty");
    //         return false;
    //     }

    //     if (string.IsNullOrEmpty(HotelBooking.guest.GEmail))
    //     {
    //         await jsRuntime.ToastrError("Email cannot be empty");
    //         return false;
    //     }
    //     return true;

    // }
}  