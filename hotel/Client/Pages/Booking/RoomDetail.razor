@page "/booking/room-details/{Id:int}"
@using Hotel.Client.Helper;
@using Hotel.Shared.Models
@using Hotel.Shared.CommonFiles
@using Hotel.Client.ViewModel
@using Hotel.Client.Utility

@inject IJSRuntime jsRuntime
@inject ILocalStorageService localStorage
@inject IRoomtypeService hotelRoomService
@inject IStripePaymentService stripePaymentService
@inject IBookingService roomOrderDetailsService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider auth
@inject IRoomImgService roomImgService
@inject IGuestService GuestService
    <div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">
        <div class="row p-2 my-3 " style="border-radius:20px; ">
            <div class="col-12 col-lg-7 p-4">
                <div class="row px-2 text-primary border-bottom">
                    <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Selected Room</p></div>
                    <div class="col-4 p-0 float-right">
                        <a href="booking" class="btn btn-secondary btn-block" style="margin-left: 75px !important;">Return to Room Selection</a>
                    </div>
                </div>

                 <div class="row">
                    <div class="col-12">
                        <div id="" class="carousel slide mb-4 m-md-3 m-0 pt-3 pt-md-0" data-ride="carousel">
                            <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                                
                              @*   <div class="carousel-inner">
                                    @foreach (var image in HotelBooking.orderDetails.RidNavigation.Rt.RoomImgs)
                                    {
                                        if (innerImageIndex == 0)
                                        {
                                            <div class="carousel-item active">
                                                <img class="d-block w-100" style="border-radius:20px;" src="@image.ImgUrl" alt="First slide">
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="carousel-item">
                                                <img class="d-block w-100" style="border-radius:20px;" src="@image.ImgUrl" alt="First slide">
                                            </div>
                                        }

                                        innerImageIndex++;
                                    }
                                </div> *@
                                <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Previous</span>
                                </a>
                                <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </div>
                        </div>
                    </div>

                </div> 
                <div class="row p-2">
                    <div class="col-12">
                        <p class="card-title" style="font-size:xx-large;">@roomtype.RtName</p>
                        <p class="card-text" style="font-size:large">
                        @((MarkupString)@roomtype.RtDes)
                        </p>
                    </div>

                </div>
            </div>

            <div class="col-12 col-lg-5 p-4 2 mt-4 mt-md-0">
                <div class="row  text-primary border-bottom">
                    <div class="col-7 "><p style="font-size:x-large;margin:0px;">Room Information</p></div>
                </div>
                <div>
                    <h4 class="font-weight-bold mt-2 ml-2 text-black">
                    @roomtype.RtName
                    </h4>
                   @*  <span class="ml-2">Max Occupancy : @HotelBooking.orderDetails.HotelRoomDTO.Occupancy adults </span><br /> *@
                <span class="ml-2 pt-1">Villa Size : @roomtype.RArea sqft</span><br />

                    @if (HotelBooking.orderDetails.BAmount > 1)
                    {
                        <span class="ml-2">Cost for @HotelBooking.orderDetails.BAmount nights stay: $@HotelBooking.orderDetails.BCost</span>
                    }
                    else
                    {
                        <span class="ml-2">Cost for @HotelBooking.orderDetails.BAmount night stay: $@HotelBooking.orderDetails.BCost </span>
                    }
                </div>
                <EditForm Model="HotelBooking.orderDetails" class="container" OnValidSubmit="HandleCheckout">

                    <div class="row px-2 text-success border-bottom"></div>
                    <div class="form-group pt-2">
                        <label class=" ">FirstName</label>
                        <InputText @bind-Value="HotelBooking.orderDetails.GIdNavigation.GFirstName" type="text" class="form-control" style="border: 1px solid rgb(154, 169, 222);" />
                    <label class=" ">LastName</label>
                        <InputText @bind-Value="HotelBooking.orderDetails.GIdNavigation.GLastName" type="text" class="form-control" style="border: 1px solid rgb(154, 169, 222);" />
                    </div>
                    <div class="form-group pt-2">
                        <label class=" ">Phone</label>
                        <InputText @bind-Value="HotelBooking.orderDetails.GIdNavigation.GSdt" type="text" class="form-control" style="border: 1px solid rgb(154, 169, 222);" />
                    </div>
                    <div class="form-group">
                        <label class=" ">Email</label>
                        <InputText @bind-Value="HotelBooking.orderDetails.GIdNavigation.GEmail" type="text" class="form-control" style="border: 1px solid rgb(154, 169, 222);" />
                    </div>
                    <div class="form-group">
                        <label class=" ">Check in Date</label>
                        <InputDate TValue="DateTime?" @bind-Value="HotelBooking.orderDetails.BCheckingDate"  disabled class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class=" ">Check out Date</label>
                        <InputDate TValue="DateTime?" @bind-Value="HotelBooking.orderDetails.BCheckoutDate" disabled="disabled" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class=" ">Length of stay</label> <br />
                        <span>@HotelBooking.orderDetails.BAmount nights</span>
                    </div>
                    <div class="form-group mt-1">
                        <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

@code {
    [Parameter]
    public int? Id { get; set; }

    public HotelRoomBookingViewModel HotelBooking { get; set; } = new HotelRoomBookingViewModel();


    RoomImg? roomimg { get; set; } = new RoomImg();
    Roomtype? roomtype { get; set; } = new Roomtype();
    Guest? guest { get; set; } = new Guest();

    Hotel1? hotel = null;
    private decimal? NoOfNights { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        try {
            await Task.Delay(5000);

            if (Id != null)
            {
                //check if the local storage is not empty (in reality it never will be)
                if (await localStorage.GetItemAsync<Booking>(SD.Local_InitialBooking) != null)
                {
                    var roomInitialInfo = await localStorage.GetItemAsync<Booking>(SD.Local_InitialBooking);
                    HotelBooking.orderDetails = new Booking();
                    var state = await auth.GetAuthenticationStateAsync();
                    var user = state.User.Identity.Name;
                    //transfer information about booking from local storage into the viewmodel
                    //inside the viewmodel, pass that information into the DTO

                    HotelBooking.orderDetails.RidNavigation.Rt = await hotelRoomService.GetRoomtypeById(Id.Value);

                    NoOfNights = roomInitialInfo.BAmount;

                    HotelBooking.orderDetails.BCheckingDate = roomInitialInfo.BCheckingDate;
                    HotelBooking.orderDetails.BCheckoutDate = roomInitialInfo.BCheckoutDate;
                    HotelBooking.orderDetails.BAmount = NoOfNights;
                    HotelBooking.orderDetails.BCost = roomInitialInfo.BCost;
                    // HotelBooking.orderDetails.GIdNavigation = await GuestService.SearchGuests(user);
                    HotelBooking.orderDetails.GId = HotelBooking.orderDetails.GIdNavigation.GId;

                }
                else
                {
                    await jsRuntime.ToastrError("Please select a check in date");
                }
            }
        }
        catch(Exception e)
        {

        }
    }


    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await roomImgService.GetRoomImgById((int)Id);
            var resultRT = await hotelRoomService.GetRoomtypeById((int)Id);

            // var result = await EmployeeService.GetEmployeeByFName(Fname);
            if (resultRT is not null){
                roomimg = result;
                roomtype = resultRT;
            }
            else
                NavigationManager.NavigateTo("/booking");
        }
    }
    private async Task HandleCheckout()
    {
        if (!await HandleValidation())
        {
            return;
        }

        try
        {
            var paymentDTO = new StripePaymentDTO()
                {
                    Cost = Convert.ToInt32(HotelBooking.orderDetails.BCost),
                    ProductName = roomtype.RtName,
                    ReturnURL = "/booking/room-details/" + Id
                };

            //Accesing the stripePaymentService
            //await success
            var result = await stripePaymentService.CheckOutCompleted(paymentDTO);

            //populate remaining attributes from orderDetails

            HotelBooking.orderDetails.StripeSessionId = result.Data.ToString();
            HotelBooking.orderDetails.Rid = HotelBooking.orderDetails.RidNavigation.RId;
            HotelBooking.orderDetails.BCost = HotelBooking.orderDetails.RidNavigation.Rt.RtCost;
            HotelBooking.orderDetails.HId = 1;
            HotelBooking.orderDetails.EId = 1;
            HotelBooking.orderDetails.DId = 1;
          
            

      
           await roomOrderDetailsService.CreateBooking(HotelBooking.orderDetails);

            await localStorage.SetItemAsync(SD.Local_RoomOrderDetails, HotelBooking.orderDetails);
            NavigationManager.NavigateTo("/success-payment");
        
        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }
    }

    private async Task<bool> HandleValidation()
    {
        if (string.IsNullOrEmpty(HotelBooking.orderDetails.GIdNavigation.GFirstName))
        {
            await jsRuntime.ToastrError("Name cannot be empty");
            return false;
        }
        if (string.IsNullOrEmpty(HotelBooking.orderDetails.GIdNavigation.GSdt))
        {
            await jsRuntime.ToastrError("Phone cannot be empty");
            return false;
        }

        if (string.IsNullOrEmpty(HotelBooking.orderDetails.GIdNavigation.GEmail))
        {
            await jsRuntime.ToastrError("Email cannot be empty");
            return false;
        }
        return true;

    }
}