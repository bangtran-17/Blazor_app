@page "/booking/roomdetail"
 @page "/booking/roomdetail/{Id:int}"
@*
@using Hotel.Client.Helper; *@
@using Hotel.Shared.Models
@using Hotel.Shared.CommonFiles
@using Hotel.Client.ViewModel
@using Hotel.Client.Utility

@inject IJSRuntime jsRuntime
@inject ILocalStorageService localStorage
@inject IRoomtypeService hotelRoomService
@inject IStripePaymentService stripePaymentService
@inject IBookingService roomOrderDetailsService
@inject IRoomService roomService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider auth
@inject IGuestService GuestService
<body>
    <canvas id="canvas2"></canvas>
    <div class="thanh-ton-b1-xong-kanh">
        <EditForm Model="HotelBooking" style="width:1520px" OnValidSubmit="HandleCheckout">
        <div class="frame">
            <div class="frame1">
                <div class="navigation-header">
                    <div class="navigation-header-child"></div>
                    <div class="navigation-header-item"></div>
                    <div class="ch-logo-vng-1-container">
                        <img class="ch-logo-vng-12"
                             alt=""
                             src="./public/ch-logo-vng-1@2x.png" />

                        <img class="logo-ko-ch-k-n-12"
                             alt=""
                             src="./public/logo-ko-ch-k-n-1@2x.png" />
                    </div>
                </div>
            </div>
            <div class="frame2">
                <div class="stepper">
                    <img class="stepper-child" alt="" src="./public/vector-14@2x.png" />

                    <div class="item1">
                        <div class="item-child"></div>
                        <div class="item-item"></div>
                        <div class="div6">1</div>
                    </div>
                    <div class="item2">
                        <div class="item-inner"></div>
                        <div class="ellipse-div"></div>
                        <div class="div7">2</div>
                    </div>
                    <div class="item3">
                        <div class="item-inner"></div>
                        <div class="ellipse-div"></div>
                        <div class="div7">3</div>
                    </div>
                </div>
            </div>
        </div>
        <div class="frame3" style="width:auto">
            <div class="title">
                <div class="frame4">
                    <div class="khch-hng-vui">
                        Khách hàng vui lòng điền đầy đủ thông tin
                    </div>
                </div>
                <div class="thng-tin-t">THÔNG TIN ĐẶT PHÒNG</div>
            </div>
            <div class="frame5">
                <div class="frame6">
                    <div class="frame7">
                        <div class="item4">
                            <div class="vn-trn-1-container">
                                <span class="vn">@roomtype.RtCost VNĐ</span>
                                <span class="trn"> trên </span>
                                <span class="vn">1 đêm</span>
                            </div>
                            <div class="phng-swimsuite-parent">
                                <div class="phng-swimsuite">Phòng @roomtype.RtName</div>
                                <div class="frame8">
                                    <div class="signature-suites2">Signature Suites</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="frame9">
                        <div class="frame10">
                            <div class="frame11">
                                <div class="input1">
                                    <div class="h">Họ</div>
                                    <InputText @bind-Value="HotelBooking.guest.GFirstName" type="text" class="input-child" style="border: 1px solid rgb(154, 169, 222);" />

                                </div>
                                <div class="input2">
                                    <div class="h">Tên</div>
                                    <InputText @bind-Value="HotelBooking.guest.GLastName" type="text" class="input-child" style="border: 1px solid rgb(154, 169, 222);" />

                                </div>
                                <AuthorizeView Context="inner_context">
                                    <Authorized >
                               
                               </Authorized>
										<NotAuthorized>
											<div class="input3">
												<div class="h">Email</div>
												<InputText @bind-Value="HotelBooking.guest.GEmail" type="text" class="input-child" style="border: 1px solid rgb(154, 169, 222);" />
											</div>
                                   </NotAuthorized>
                                </AuthorizeView>
                                <div class="input4">
                                    <div class="h">Số điện thoại</div>
                                    <InputText @bind-Value="HotelBooking.guest.GSdt" type="text" class="input-child" style="border: 1px solid rgb(154, 169, 222);" />

                                </div>
                              
                                <div class="input7">
                                    <div class="h">Ngày Check-in</div>
                                   
                                    <InputDate TValue="DateTime?" @bind-Value="HotelBooking.homeVM.StartDate" disabled="disabled" class="input-child" />

                                </div>
                                <div class="input8">
                                    <div class="h">Ngày Check-out</div>
                                    <InputDate TValue="DateTime?" @bind-Value="HotelBooking.homeVM.EndDate" disabled="disabled" class="input-child" />

                                </div>
                            </div>
                        </div>
                        <img class="frame-inner" alt="" src="./public/vector-13@2x.png" />
                    </div>
                </div>
            </div>
        </div>
        <div class="frame12">
            <div class="frame13">
                <button class="btn-secondary">
                    <div class="bg"></div>
                    <div class="cancel">Hủy</div>
                </button>
            </div>
            <div class="frame14">
                <button class="btn-secondary" id="btnPrimary" type="submit">
                    <div class="bg1"></div>
                    <div class="continue-to-book">Tiếp tục</div>
                </button>
            </div>
        </div>
        </EditForm>
    </div>

    
    <script src="script.js"></script>
</body>



@code {
    [Parameter]
    public int? Id { get; set; }

    HotelRoomBookingViewModel HotelBooking = new HotelRoomBookingViewModel();
    HomeVM homeVM { get; set; } = new HomeVM();
    string? user;
    RoomImg? roomimg { get; set; } = new RoomImg();
    Roomtype roomtype { get; set; } = new Roomtype();
    Guest? guest { get; set; } = new Guest();
    List<Room> roomSet { get; set; } = new List<Room>();
    Room roomChosen { get; set; } = new Room();
    Hotel1? hotel = null;
    private decimal? NoOfNights { get; set; } = 1;
    Feedback feedback { get; set; } = new Feedback();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Task.Delay(5000);

            if (Id != null)
            {
                //check if the local storage is not empty (in reality it never will be)
                if (await localStorage.GetItemAsync<HomeVM>(SD.Local_InitialBooking) != null)
                {
                    HotelBooking.homeVM = await localStorage.GetItemAsync<HomeVM>(SD.Local_InitialBooking);

                    var state = await auth.GetAuthenticationStateAsync();
                    if (state.User.Identity.IsAuthenticated)
                    {
                        user = state.User.Identity.Name;
                        HotelBooking.guest.GAccount = user;

                    }

                    await RandomRoom();

                    // roomtype = await hotelRoomService.GetRoomtypeById(Id.Value);


                    HotelBooking.orderDetails.BStayDuration = (int)HotelBooking.homeVM.NoOfNights;
                    HotelBooking.orderDetails.BCheckingDate = HotelBooking.homeVM.StartDate;
                    HotelBooking.orderDetails.BCheckoutDate = HotelBooking.homeVM.EndDate;
                    HotelBooking.orderDetails.BAmount = HotelBooking.homeVM.NoOfNights;
                    HotelBooking.orderDetails.BCost = HotelBooking.homeVM.Cost;
                    HotelBooking.orderDetails.Rid = roomChosen.RId;

                    HotelBooking.orderDetails.BDate = DateTime.Now;
                    HotelBooking.orderDetails.StripeSessionId = "1";

                }


                else
                {
                    // await jsRuntime.ToastrError("Please select a check in date");
                }
            }

        }
        catch (Exception e)
        {

        }

    }



    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            // var result = await roomImgService.GetRoomImgById((int)Id);
            var resultRT = await hotelRoomService.GetRoomtypeById((int)Id);

            // var result = await EmployeeService.GetEmployeeByFName(Fname);
            if (resultRT is not null)
            {
                // roomimg = result;
                roomtype = resultRT;
            }
            else
                NavigationManager.NavigateTo("/booking");
        }
    }


    private async Task HandleCheckout()
    {

        try
        {
            if(await GuestService.SearchGuestByName(user)!=null)
            {
                guest = await GuestService.SearchGuestByName(user);
                guest.GFirstName = HotelBooking.guest.GFirstName;
                guest.GLastName = HotelBooking.guest.GLastName;
                guest.GSdt = HotelBooking.guest.GSdt;
                guest.GEmail = guest.GEmail;
                guest.GAccount = HotelBooking.guest.GAccount;
                await GuestService.UpdateGuest(guest.GId, guest);
                HotelBooking.orderDetails.GId = guest.GId;
            }
            else{ 
                guest.GEmail = HotelBooking.guest.GEmail;
              await GuestService.CreateGuest(HotelBooking.guest);  
              HotelBooking.orderDetails.GId = await getGid();
                }
          
            await roomOrderDetailsService.CreateBooking(HotelBooking.orderDetails);

            roomChosen.RAvailable = "No";

            await roomService.UpdateRoom(roomChosen.RId, roomChosen);
            await localStorage.SetItemAsync(SD.Local_RoomOrderDetails, HotelBooking.orderDetails);
            NavigationManager.NavigateTo($"booking/roomdetail1/{Id}");

        }
        catch (Exception e)
        {
            // await jsRuntime.ToastrError(e.Message);
        }
    }
    public async Task<int> getGid()
    {
        int max = 0;
        await GuestService.GetGuests();
        foreach (var guest in GuestService.Guests)
        {
            if (guest.GId > max)
            {
                max = guest.GId;

            }
        }
        return max;
    }
    
    public async Task RandomRoom()
    {

      roomSet = await roomService.GetRoomByFName(Id.ToString());
        foreach (var room in roomSet)
        {
            if (room.RAvailable == "Yes")
            {
                roomChosen = room;
                roomChosen.Bookings = null;
                break;
            }


        }
    }
    // private async Task<bool> HandleValidation()
    // {
    //     if (string.IsNullOrEmpty(HotelBooking.guest.GFirstName))
    //     {
    //         await jsRuntime.ToastrError("Name cannot be empty");
    //         return false;
    //     }
    //     if (string.IsNullOrEmpty(HotelBooking.guest.GSdt))
    //     {
    //         await jsRuntime.ToastrError("Phone cannot be empty");
    //         return false;
    //     }

    //     if (string.IsNullOrEmpty(HotelBooking.guest.GEmail))
    //     {
    //         await jsRuntime.ToastrError("Email cannot be empty");
    //         return false;
    //     }
    //     return true;

    // }
}  