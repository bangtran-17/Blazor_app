@page "/payyy"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
@* @page "/payment"

@inject IVnPayService VnPayService
@inject NavigationManager NavigationManager
@inject IHubClient HubClient

<h3>LocPayment</h3>

<button @onclick="MakePayment">Test thanh toán</button>
<div>
    <p>Payment Status: @paymentStatus</p>
</div>


@code {

    Payment payment = new Payment()
        {
            PAmout = 20000,
            BId = 1
        };

    async void MakePayment()
    {
        string paymentUrl = await VnPayService.CreatePaymentUrl(payment);
        NavigationManager.NavigateTo(paymentUrl);
    }
    // ---------------------------------------
    private string paymentStatus = "Waiting for payment...";

    protected override async Task OnInitializedAsync()
    {
        HubClient.OnPaymentResponse += OnPaymentResponse;
        await HubClient.StartConnection();
    }

    private void OnPaymentResponse(PaymentResponseModel paymentResponse)
    {
        paymentStatus = $"Received payment response: {paymentResponse.Success}";
        StateHasChanged();
    }
}
 *@